
Aim of the exercise: Host a simple flask app via K8s. 

1. Create a simple flask app
2. Buila a Docker image
3. Tag & Push the image to docker hub
4. Create K8s deployment yaml file for pulling and running the flask app image
5. Access the application via K8s

Note : In this example we will run 1 Container inside of the POD.

# Delete the deployment if in case if already exists

kubectl delete deployment python-mongo && kubectl delete services python-mongo-service
# Delete the python and mongo docker images
docker rmi -f hello-python:testing python-mongo:testing mongo:latest


#Pull mongo image, Create tag for mongo and push the image to docker hub registry

docker pull mongo
docker tag mongo:latest jupiter19/jupiter19:db-pymongo
docker push jupiter19/jupiter19:db-pymongo

# Build the python flask app image, tag it and push the image to docker hub registry

docker build -t python-mongo:testing -f dockerfile-ubuntu .
docker tag python-mongo:testing jupiter19/jupiter19:testing-pymongo
docker push jupiter19/jupiter19:testing-pymongo


# Create a deployment in K8s
kubectl apply -f k8s.yaml

# Check the status of the PODs
kubectl describe pods
kubectl get pods


# Run CURL Command to test the application running inside of K8s
curl -XGET http://localhost:6000/
curl -XGET http://localhost:6000/welcome/Arun/Chandramouli


# Execute the container inside K8s POD in an interactive mode..
kubectl exec -it python-mongo-c5687b876-4zbnd -c python-mongo-app bash