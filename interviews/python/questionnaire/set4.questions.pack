1. Whats the output of the following statement

	# Find the value of the attrs
	class Props:

	    def __init__(self,a,b,c,d):
	        self.a = a
	        self.b = b
	        self.c = b ** 2
	        self.d = d

	    def __call__(self):

	        self.a,self.d = self.b*10,self.c*200
	        self.b,self.c = self.a**2,self.c*2
	        return self.a,self.b,self.c,self.d

	    @property
	    def return_val(self):
	        return [self.a+self.b+self.c+self.d]
	    
	if __name__ == "__main__":

	    ins_props = Props(1,2,3,4)
	    ins_props()
	    print(ins_props.return_val)

2. Whats the output of the following statement

	class Python:

	    def __init__(self,*args):

	        self.a = max(args)
	        self.b = min(args)
	        self.c = self.a ** 2
	        self.d = self.b ** 2

	    def __call__(self):
	        from functools import reduce
	        def return_vals():
	            result = reduce((lambda x,y:x+y),[self.a,self.b,self.c,self.d])
	            return result < self.c
	        return return_vals()
	        
	if __name__ == "__main__":

	    ins_props = Python(10,20,30,40)
	    print(ins_props())

3. Whats the output of the following statement

	class Python:

	    def __init__(self,*args,**kwargs):

	        self.a = kwargs.get("x",-100)
	        self.b = kwargs.get("y",-200)
	        self.c = kwargs.get("z",-300)
	        self.d = kwargs.get("x1",100)
	        self.e = kwargs.get("y1",200)
	        self.f = kwargs.get("z1",300)
	        self.__class__.mapper = [self.a,self.b,self.c,self.d,self.e,self.f]
	        self.__class__.tupleargs = args
	        self.fin_sum = 0

	    def process(cls):
	        cls.tupleargs_a,cls.tupleargs_b = cls.tupleargs
	        for list_a,list_b,list_c in zip(cls.tupleargs_a,sorted(cls.tupleargs_b,key=lambda y:-y),sorted(cls.mapper,key=lambda x:-x)):
	            cls.fin_sum += list_a+list_b+list_c
	        return cls.fin_sum            
	        
	if __name__ == "__main__":

	    ins_props = Python([1,2,3,4,5],[6,7,8,9,10],x=10,y=20,z=30//2,x1=100//4,z1=20//5,y1=200//100)
	    print(ins_props.process())

4. Whats the output of the following statement

	def result(*args):
	    def process():
	        a = list(args)
	        b,c = a[:],a[::]
	        return a==b==c and not (id(a)==id(b)==id(c))
	    return process()

	if __name__ == "__main__":
	    print(result(10,15,20,25,30,35,40,45,50))

5. Whats the output of the following statement

	def result(*args):
	    def process():
	        a = list(args)
	        b,c = a[:-1],a[::]
	        b[3]=1000
	        return a[3]==1000 and c[3]==1000        
	    return process()

	if __name__ == "__main__":
	    print(result(10,15,20,25,30,[35,40],45,50,[100,200],5,0))	    

6. Whats the output of the following statement

	def result(*args):
	    def process():
	        a = list(args)
	        b,c = a[:],a[:]
	        b[-3][1]=2000
	        return c[8][1]==2000 and a==b==c
	    return process()

	if __name__ == "__main__":
	    print(result(10,15,20,25,30,[35,40],45,50,[100,200],5,0))

7. Whats the output of the following statement

	def result(*args):
	    fin_result = 0
	    for each_rec in args:
	        try:
	            fin_result += sum(each_rec)
	        except TypeError as error:
	            fin_result -= each_rec
	        except Exception as error:
	            fin_result = 0
	    return fin_result

	if __name__ == "__main__":
	    print(result(10,15,20,25,30,[35,40],45,50,[100,200],5,0))

8. Whats the output of the following statement
	
	import functools

	def tests_array(*args):

	    return {_arg[0]:functools.reduce((lambda x,y:x*y),_arg) for _arg in args if not _arg.__class__ == dict}

	if __name__ == "__main__":
	    result = tests_array([1,2,3,4,5],(6,7,8,9,10))
	    print(sorted(result,key=lambda x:-x))

9. Whats the output of the following statement

	_sum = {}

	class Tests:

		def __init__(cls,*args):
			cls.args = args
		
		def check(cls):
			try:
				def _check():
					_sum = {}
					for _arg in cls.args:
						try:
							_sum = dict.fromkeys(_arg)
						except TypeError:
							_sum = None
					return _sum
				return _check().keys().__len__()
			except Exception as err:
				return False

	if __name__ == "__main__":
		result = Tests([1,2,3,4,5],{6,7,8,9,0},list(range(10,15)),list(range(110,115))).check()
		print(result)
	    
10. Whats the output of the following statement

	class Tests:

		def __init__(cls,*args):
			cls.args = args
			cls._sum = []
		
		def check(cls):
			for _arg in cls.args:
				try:
					cls._sum+=_arg
				except IndexError:
					continue
				except TypeError:
					print(cls._sum)
					cls._sum = None
			return max(cls._sum[:-1])

	if __name__ == "__main__":
		result = Tests([1,2,3,4,5],{6,7,8,9,0},list(range(10,15)),list(range(110,115))).check()
		print(result)