1. Whats the output of the following statement

	resultB = list(filter(lambda arg:arg%2==0 and arg%5==0 and arg%10==0,range(100,200)))
	from functools import reduce
	resultC = reduce(lambda x,y:x+y,range(10,20))
	fin_mapper = sorted(resultB + [resultC])
	print(fin_mapper)

2. Whats the output of the following statement

	def process(mapper_final={0:True,1:False,2:False,3:True}):

	    resultA = [_key**2 for _key in mapper_final.keys() if mapper_final[_key]==True]
	    resultB = [_key**2 for _key in mapper_final.keys() if mapper_final[_key]==False]
	    fin_result = sorted(resultA+resultB)
	    return fin_result

	if __name__ == "__main__":

	    result = process({1:False,10:False,2:True,3:True,5:True,7:True,8:False,11:True,20:True,55:False})
	    print(result)

3. Whats the output of the following statement

	class Alpha:

	        def __init__(self,a,b,c,d,e,f,g,h):
	            self.__dict__.update({_key:_val for _key,_val in locals().items() if _key!="self" and _val.__class__ == int})

	        def print(self):
	            return sorted(self.__dict__.values())

	if __name__ == "__main__":
	        alpha_obj = Alpha(100,10,"Alpha",20,25,"40",85,50)
	        print(alpha_obj.print())

4. Whats the output of the following statement

	def loops_tests():

	        x,y,z=10,11,12
	        counter=1

	        while True:
	            x,y,z=x+10,y+10,z+10
	            if x+y+z > 200:
	                return counter
	            counter+=(x*1+y*2+z*3)

	if __name__ == "__main__":
		
	    # Run Code :
	    print(loops_tests())

5. Whats the output of the following statement

	def loops():

	        x=y=z=1000
	        counter=0

	        while True:
	            x,y,z=x+10,y+10,z+10
	            sum_vals = x+y+z
	            if sum_vals > 4000:
	                return counter
	            counter+=10

	if __name__ == "__main__":

	    # Run Code :
	    print(loops())
		
6. Whats the output of the following statement

	# Find the value of the counter variable

	def loops(ranges):

	    _ranges = ranges[::]
	    counter = 0
	    for i in ranges:
	    	for j in _ranges:
	    		counter +=1
	    return counter

	if __name__ == "__main__":

	    # Run Code :
	    result = loops(ranges=list(range(100,200)))
	    print(result)

7. Whats the output of the following statement

	# Find the value of the counter variable
	def loops(ranges):

	    _ranges,_ranges_x = ranges[::] , ranges[:]
	    counter = 0
	    for i in ranges:
	    	for j in _ranges:
	    		for k in _ranges_x:    			
	    			continue
	    		counter +=1
	    return counter

	if __name__ == "__main__":

	    # Run Code :
	    result = loops(ranges=list(range(100,200)))
	    print(result)

8. Whats the output of the following statement

	class A(object):
	        
	    vara=100
	    varb=200
	    varc=300
	    vard=400

	class B(A):
	    
	    vara=200
	    varb=200
	    varc=300
	    varz="Hello World"

	class D(B,list):

	    vara=2000
	    varb1=2000
	    varc=3000
	    varz="Hello"

	class C(D):
	    varc=300

	if __name__ == "__main__":
	    print(C.vara,C.varb,C.varc,C.varz,C.vard,C.append is not None)

9. Whats the output of the following statement

	class A(object):
	        
	    vara=100
	    varb=200
	    varc=300
	    vard=400

	class B(A):
	    
	    vara=200
	    varb=200
	    varc=300
	    varz="Hello World"

	class D(B,list):

	    vara=2000
	    varb1=2000
	    varc=3000
	    varz="Hello"

	class C(D):
	    varc=300

	    def append(self):
	        return None

	if __name__ == "__main__":
	    print([C.vara,C.varb,C.varc,C.varz,C.vard,C.append is not None])

10. Whats the output of the following statement

	# Find the value of the attrs
	class Props:

	    def __init__(self,a,b,c,d):
	        self.a = a
	        self.b = b
	        self.c = c
	        self.d = d

	    def __call__(self):

	        self.a,self.d = self.b*10,self.c*100
	        self.b,self.c = self.a*5,self.c*2
	        return self.a,self.b,self.c,self.d

	    @property
	    def return_val(self):
	        return [self.a+self.b+self.c+self.d]
	    
	if __name__ == "__main__":

	    ins_props = Props(1,2,3,4)
	    ins_props()
	    print(ins_props.return_val)
